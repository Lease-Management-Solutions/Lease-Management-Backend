openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
paths:
  /users:
    post:
      summary: Create a new user
      security:
        - BearerAuth: []
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Missing or invalid fields
        500:
          description: Internal server error
    get:
      summary: Get a list of users
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter users by status (active/inactive)
          required: false
          schema:
            type: string
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Internal server error

  /users/{id}:
    get:
      summary: Get a user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
      responses:
        200:
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Internal server error
    put:
      summary: Update user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Internal server error
    delete:
      summary: Delete a user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
        500:
          description: Internal server error

  /users/changePassword:
    post:
      summary: Change the password of the logged-in user
      responses:
        200:
          description: Password changed successfully
        400:
          description: Invalid or missing password
        401:
          description: Unauthorized
        500:
          description: Internal server error
  
  /users/changePasswordById/{id}:
    put:
      summary: Change the password of a user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        200:
          description: Password updated successfully
        404:
          description: User not found
        500:
          description: Internal server error

  /users/changeUserStatusbyId/{id}:
    put:
      summary: Change the status of a user by ID (active/inactive)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        200:
          description: User status changed successfully
        404:
          description: User not found
        500:
          description: Internal server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: The name of the user
        cpf:
          type: string
          description: CPF of the user
        rg:
          type: string
          description: RG of the user
        issuingAuthority:
          type: string
          description: The issuing authority of the RG
        rgIssuingState:
          type: string
          description: The state that issued the RG
        address:
          type: string
          description: The address of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
        maritalStatus:
          type: string
          description: Marital status of the user
        role:
          type: string
          description: The role of the user
        nationality:
          type: string
          description: The nationality of the user
        avatar:
          type: string
          description: Avatar image URL for the user
        status:
          type: string
          description: The status of the user (active/inactive)
        phones:
          type: array
          items:
            type: string
          description: The list of phone numbers of the user
